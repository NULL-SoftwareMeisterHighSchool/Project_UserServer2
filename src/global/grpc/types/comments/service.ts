/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: comments/service.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../google/protobuf/timestamp";
import * as dependency_2 from "./../google/protobuf/empty";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace commnets {
    export class CreateCommentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[4], [5]];
        constructor(data?: any[] | ({
            articleID?: number;
            authorID?: number;
            body?: string;
        } & (({
            replyTo?: number;
        }) | ({
            mentionUserID?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("articleID" in data && data.articleID != undefined) {
                    this.articleID = data.articleID;
                }
                if ("authorID" in data && data.authorID != undefined) {
                    this.authorID = data.authorID;
                }
                if ("body" in data && data.body != undefined) {
                    this.body = data.body;
                }
                if ("replyTo" in data && data.replyTo != undefined) {
                    this.replyTo = data.replyTo;
                }
                if ("mentionUserID" in data && data.mentionUserID != undefined) {
                    this.mentionUserID = data.mentionUserID;
                }
            }
        }
        get articleID() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set articleID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get authorID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set authorID(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get body() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set body(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get replyTo() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set replyTo(value: number) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
        }
        get has_replyTo() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get mentionUserID() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set mentionUserID(value: number) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[1], value);
        }
        get has_mentionUserID() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get _replyTo() {
            const cases: {
                [index: number]: "none" | "replyTo";
            } = {
                0: "none",
                4: "replyTo"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        get _mentionUserID() {
            const cases: {
                [index: number]: "none" | "mentionUserID";
            } = {
                0: "none",
                5: "mentionUserID"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        static fromObject(data: {
            articleID?: number;
            authorID?: number;
            body?: string;
            replyTo?: number;
            mentionUserID?: number;
        }): CreateCommentRequest {
            const message = new CreateCommentRequest({});
            if (data.articleID != null) {
                message.articleID = data.articleID;
            }
            if (data.authorID != null) {
                message.authorID = data.authorID;
            }
            if (data.body != null) {
                message.body = data.body;
            }
            if (data.replyTo != null) {
                message.replyTo = data.replyTo;
            }
            if (data.mentionUserID != null) {
                message.mentionUserID = data.mentionUserID;
            }
            return message;
        }
        toObject() {
            const data: {
                articleID?: number;
                authorID?: number;
                body?: string;
                replyTo?: number;
                mentionUserID?: number;
            } = {};
            if (this.articleID != null) {
                data.articleID = this.articleID;
            }
            if (this.authorID != null) {
                data.authorID = this.authorID;
            }
            if (this.body != null) {
                data.body = this.body;
            }
            if (this.replyTo != null) {
                data.replyTo = this.replyTo;
            }
            if (this.mentionUserID != null) {
                data.mentionUserID = this.mentionUserID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.articleID != 0)
                writer.writeUint32(1, this.articleID);
            if (this.authorID != 0)
                writer.writeUint32(2, this.authorID);
            if (this.body.length)
                writer.writeString(3, this.body);
            if (this.has_replyTo)
                writer.writeUint32(4, this.replyTo);
            if (this.has_mentionUserID)
                writer.writeUint32(5, this.mentionUserID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateCommentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateCommentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.articleID = reader.readUint32();
                        break;
                    case 2:
                        message.authorID = reader.readUint32();
                        break;
                    case 3:
                        message.body = reader.readString();
                        break;
                    case 4:
                        message.replyTo = reader.readUint32();
                        break;
                    case 5:
                        message.mentionUserID = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateCommentRequest {
            return CreateCommentRequest.deserialize(bytes);
        }
    }
    export class DeleteCommnetRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            commentID?: number;
            articleID?: number;
            userID?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("commentID" in data && data.commentID != undefined) {
                    this.commentID = data.commentID;
                }
                if ("articleID" in data && data.articleID != undefined) {
                    this.articleID = data.articleID;
                }
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
            }
        }
        get commentID() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set commentID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get articleID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set articleID(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            commentID?: number;
            articleID?: number;
            userID?: number;
        }): DeleteCommnetRequest {
            const message = new DeleteCommnetRequest({});
            if (data.commentID != null) {
                message.commentID = data.commentID;
            }
            if (data.articleID != null) {
                message.articleID = data.articleID;
            }
            if (data.userID != null) {
                message.userID = data.userID;
            }
            return message;
        }
        toObject() {
            const data: {
                commentID?: number;
                articleID?: number;
                userID?: number;
            } = {};
            if (this.commentID != null) {
                data.commentID = this.commentID;
            }
            if (this.articleID != null) {
                data.articleID = this.articleID;
            }
            if (this.userID != null) {
                data.userID = this.userID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.commentID != 0)
                writer.writeUint32(1, this.commentID);
            if (this.articleID != 0)
                writer.writeUint32(2, this.articleID);
            if (this.userID != 0)
                writer.writeUint32(3, this.userID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteCommnetRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteCommnetRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.commentID = reader.readUint32();
                        break;
                    case 2:
                        message.articleID = reader.readUint32();
                        break;
                    case 3:
                        message.userID = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteCommnetRequest {
            return DeleteCommnetRequest.deserialize(bytes);
        }
    }
    export class GetCommentsByArticleIDRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[2]];
        constructor(data?: any[] | ({
            articleID?: number;
        } & (({
            userID?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("articleID" in data && data.articleID != undefined) {
                    this.articleID = data.articleID;
                }
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
            }
        }
        get articleID() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set articleID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_userID() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _userID() {
            const cases: {
                [index: number]: "none" | "userID";
            } = {
                0: "none",
                2: "userID"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            articleID?: number;
            userID?: number;
        }): GetCommentsByArticleIDRequest {
            const message = new GetCommentsByArticleIDRequest({});
            if (data.articleID != null) {
                message.articleID = data.articleID;
            }
            if (data.userID != null) {
                message.userID = data.userID;
            }
            return message;
        }
        toObject() {
            const data: {
                articleID?: number;
                userID?: number;
            } = {};
            if (this.articleID != null) {
                data.articleID = this.articleID;
            }
            if (this.userID != null) {
                data.userID = this.userID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.articleID != 0)
                writer.writeUint32(1, this.articleID);
            if (this.has_userID)
                writer.writeUint32(2, this.userID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCommentsByArticleIDRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetCommentsByArticleIDRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.articleID = reader.readUint32();
                        break;
                    case 2:
                        message.userID = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetCommentsByArticleIDRequest {
            return GetCommentsByArticleIDRequest.deserialize(bytes);
        }
    }
    export class CommentElem extends pb_1.Message {
        #one_of_decls: number[][] = [[6]];
        constructor(data?: any[] | ({
            commentID?: number;
            authorID?: number;
            body?: string;
            createdAt?: dependency_1.google.protobuf.Timestamp;
            replyCount?: number;
        } & (({
            mentionUserID?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("commentID" in data && data.commentID != undefined) {
                    this.commentID = data.commentID;
                }
                if ("authorID" in data && data.authorID != undefined) {
                    this.authorID = data.authorID;
                }
                if ("body" in data && data.body != undefined) {
                    this.body = data.body;
                }
                if ("createdAt" in data && data.createdAt != undefined) {
                    this.createdAt = data.createdAt;
                }
                if ("replyCount" in data && data.replyCount != undefined) {
                    this.replyCount = data.replyCount;
                }
                if ("mentionUserID" in data && data.mentionUserID != undefined) {
                    this.mentionUserID = data.mentionUserID;
                }
            }
        }
        get commentID() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set commentID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get authorID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set authorID(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get body() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set body(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get createdAt() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 4) as dependency_1.google.protobuf.Timestamp;
        }
        set createdAt(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_createdAt() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get replyCount() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set replyCount(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get mentionUserID() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set mentionUserID(value: number) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[0], value);
        }
        get has_mentionUserID() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get _mentionUserID() {
            const cases: {
                [index: number]: "none" | "mentionUserID";
            } = {
                0: "none",
                6: "mentionUserID"
            };
            return cases[pb_1.Message.computeOneofCase(this, [6])];
        }
        static fromObject(data: {
            commentID?: number;
            authorID?: number;
            body?: string;
            createdAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            replyCount?: number;
            mentionUserID?: number;
        }): CommentElem {
            const message = new CommentElem({});
            if (data.commentID != null) {
                message.commentID = data.commentID;
            }
            if (data.authorID != null) {
                message.authorID = data.authorID;
            }
            if (data.body != null) {
                message.body = data.body;
            }
            if (data.createdAt != null) {
                message.createdAt = dependency_1.google.protobuf.Timestamp.fromObject(data.createdAt);
            }
            if (data.replyCount != null) {
                message.replyCount = data.replyCount;
            }
            if (data.mentionUserID != null) {
                message.mentionUserID = data.mentionUserID;
            }
            return message;
        }
        toObject() {
            const data: {
                commentID?: number;
                authorID?: number;
                body?: string;
                createdAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                replyCount?: number;
                mentionUserID?: number;
            } = {};
            if (this.commentID != null) {
                data.commentID = this.commentID;
            }
            if (this.authorID != null) {
                data.authorID = this.authorID;
            }
            if (this.body != null) {
                data.body = this.body;
            }
            if (this.createdAt != null) {
                data.createdAt = this.createdAt.toObject();
            }
            if (this.replyCount != null) {
                data.replyCount = this.replyCount;
            }
            if (this.mentionUserID != null) {
                data.mentionUserID = this.mentionUserID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.commentID != 0)
                writer.writeUint32(1, this.commentID);
            if (this.authorID != 0)
                writer.writeUint32(2, this.authorID);
            if (this.body.length)
                writer.writeString(3, this.body);
            if (this.has_createdAt)
                writer.writeMessage(4, this.createdAt, () => this.createdAt.serialize(writer));
            if (this.replyCount != 0)
                writer.writeUint32(5, this.replyCount);
            if (this.has_mentionUserID)
                writer.writeUint32(6, this.mentionUserID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CommentElem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CommentElem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.commentID = reader.readUint32();
                        break;
                    case 2:
                        message.authorID = reader.readUint32();
                        break;
                    case 3:
                        message.body = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.createdAt, () => message.createdAt = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 5:
                        message.replyCount = reader.readUint32();
                        break;
                    case 6:
                        message.mentionUserID = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CommentElem {
            return CommentElem.deserialize(bytes);
        }
    }
    export class GetCommentsByArticleIDResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            comments?: CommentElem[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("comments" in data && data.comments != undefined) {
                    this.comments = data.comments;
                }
            }
        }
        get comments() {
            return pb_1.Message.getRepeatedWrapperField(this, CommentElem, 1) as CommentElem[];
        }
        set comments(value: CommentElem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            comments?: ReturnType<typeof CommentElem.prototype.toObject>[];
        }): GetCommentsByArticleIDResponse {
            const message = new GetCommentsByArticleIDResponse({});
            if (data.comments != null) {
                message.comments = data.comments.map(item => CommentElem.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                comments?: ReturnType<typeof CommentElem.prototype.toObject>[];
            } = {};
            if (this.comments != null) {
                data.comments = this.comments.map((item: CommentElem) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.comments.length)
                writer.writeRepeatedMessage(1, this.comments, (item: CommentElem) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCommentsByArticleIDResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetCommentsByArticleIDResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.comments, () => pb_1.Message.addToRepeatedWrapperField(message, 1, CommentElem.deserialize(reader), CommentElem));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetCommentsByArticleIDResponse {
            return GetCommentsByArticleIDResponse.deserialize(bytes);
        }
    }
    export class GetRepliesByCommentIDRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[3]];
        constructor(data?: any[] | ({
            commentID?: number;
            articleID?: number;
        } & (({
            userID?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("commentID" in data && data.commentID != undefined) {
                    this.commentID = data.commentID;
                }
                if ("articleID" in data && data.articleID != undefined) {
                    this.articleID = data.articleID;
                }
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
            }
        }
        get commentID() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set commentID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get articleID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set articleID(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_userID() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get _userID() {
            const cases: {
                [index: number]: "none" | "userID";
            } = {
                0: "none",
                3: "userID"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            commentID?: number;
            articleID?: number;
            userID?: number;
        }): GetRepliesByCommentIDRequest {
            const message = new GetRepliesByCommentIDRequest({});
            if (data.commentID != null) {
                message.commentID = data.commentID;
            }
            if (data.articleID != null) {
                message.articleID = data.articleID;
            }
            if (data.userID != null) {
                message.userID = data.userID;
            }
            return message;
        }
        toObject() {
            const data: {
                commentID?: number;
                articleID?: number;
                userID?: number;
            } = {};
            if (this.commentID != null) {
                data.commentID = this.commentID;
            }
            if (this.articleID != null) {
                data.articleID = this.articleID;
            }
            if (this.userID != null) {
                data.userID = this.userID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.commentID != 0)
                writer.writeUint32(1, this.commentID);
            if (this.articleID != 0)
                writer.writeUint32(2, this.articleID);
            if (this.has_userID)
                writer.writeUint32(3, this.userID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRepliesByCommentIDRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRepliesByCommentIDRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.commentID = reader.readUint32();
                        break;
                    case 2:
                        message.articleID = reader.readUint32();
                        break;
                    case 3:
                        message.userID = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRepliesByCommentIDRequest {
            return GetRepliesByCommentIDRequest.deserialize(bytes);
        }
    }
    export class ReplyElem extends pb_1.Message {
        #one_of_decls: number[][] = [[5]];
        constructor(data?: any[] | ({
            commentID?: number;
            authorID?: number;
            body?: string;
            createdAt?: dependency_1.google.protobuf.Timestamp;
        } & (({
            mentionUserID?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("commentID" in data && data.commentID != undefined) {
                    this.commentID = data.commentID;
                }
                if ("authorID" in data && data.authorID != undefined) {
                    this.authorID = data.authorID;
                }
                if ("body" in data && data.body != undefined) {
                    this.body = data.body;
                }
                if ("createdAt" in data && data.createdAt != undefined) {
                    this.createdAt = data.createdAt;
                }
                if ("mentionUserID" in data && data.mentionUserID != undefined) {
                    this.mentionUserID = data.mentionUserID;
                }
            }
        }
        get commentID() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set commentID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get authorID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set authorID(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get body() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set body(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get createdAt() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 4) as dependency_1.google.protobuf.Timestamp;
        }
        set createdAt(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_createdAt() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get mentionUserID() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set mentionUserID(value: number) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[0], value);
        }
        get has_mentionUserID() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get _mentionUserID() {
            const cases: {
                [index: number]: "none" | "mentionUserID";
            } = {
                0: "none",
                5: "mentionUserID"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        static fromObject(data: {
            commentID?: number;
            authorID?: number;
            body?: string;
            createdAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            mentionUserID?: number;
        }): ReplyElem {
            const message = new ReplyElem({});
            if (data.commentID != null) {
                message.commentID = data.commentID;
            }
            if (data.authorID != null) {
                message.authorID = data.authorID;
            }
            if (data.body != null) {
                message.body = data.body;
            }
            if (data.createdAt != null) {
                message.createdAt = dependency_1.google.protobuf.Timestamp.fromObject(data.createdAt);
            }
            if (data.mentionUserID != null) {
                message.mentionUserID = data.mentionUserID;
            }
            return message;
        }
        toObject() {
            const data: {
                commentID?: number;
                authorID?: number;
                body?: string;
                createdAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                mentionUserID?: number;
            } = {};
            if (this.commentID != null) {
                data.commentID = this.commentID;
            }
            if (this.authorID != null) {
                data.authorID = this.authorID;
            }
            if (this.body != null) {
                data.body = this.body;
            }
            if (this.createdAt != null) {
                data.createdAt = this.createdAt.toObject();
            }
            if (this.mentionUserID != null) {
                data.mentionUserID = this.mentionUserID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.commentID != 0)
                writer.writeUint32(1, this.commentID);
            if (this.authorID != 0)
                writer.writeUint32(2, this.authorID);
            if (this.body.length)
                writer.writeString(3, this.body);
            if (this.has_createdAt)
                writer.writeMessage(4, this.createdAt, () => this.createdAt.serialize(writer));
            if (this.has_mentionUserID)
                writer.writeUint32(5, this.mentionUserID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplyElem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplyElem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.commentID = reader.readUint32();
                        break;
                    case 2:
                        message.authorID = reader.readUint32();
                        break;
                    case 3:
                        message.body = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.createdAt, () => message.createdAt = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 5:
                        message.mentionUserID = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplyElem {
            return ReplyElem.deserialize(bytes);
        }
    }
    export class GetRepliesByCommentIDResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            replies?: ReplyElem[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("replies" in data && data.replies != undefined) {
                    this.replies = data.replies;
                }
            }
        }
        get replies() {
            return pb_1.Message.getRepeatedWrapperField(this, ReplyElem, 1) as ReplyElem[];
        }
        set replies(value: ReplyElem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            replies?: ReturnType<typeof ReplyElem.prototype.toObject>[];
        }): GetRepliesByCommentIDResponse {
            const message = new GetRepliesByCommentIDResponse({});
            if (data.replies != null) {
                message.replies = data.replies.map(item => ReplyElem.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                replies?: ReturnType<typeof ReplyElem.prototype.toObject>[];
            } = {};
            if (this.replies != null) {
                data.replies = this.replies.map((item: ReplyElem) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.replies.length)
                writer.writeRepeatedMessage(1, this.replies, (item: ReplyElem) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRepliesByCommentIDResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRepliesByCommentIDResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.replies, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ReplyElem.deserialize(reader), ReplyElem));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRepliesByCommentIDResponse {
            return GetRepliesByCommentIDResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedCommentServiceService {
        static definition = {
            CreateComment: {
                path: "/commnets.CommentService/CreateComment",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateCommentRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateCommentRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            DeleteCommnet: {
                path: "/commnets.CommentService/DeleteCommnet",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteCommnetRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteCommnetRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            GetCommentsByArticleID: {
                path: "/commnets.CommentService/GetCommentsByArticleID",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetCommentsByArticleIDRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetCommentsByArticleIDRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetCommentsByArticleIDResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetCommentsByArticleIDResponse.deserialize(new Uint8Array(bytes))
            },
            GetRepliesByCommentID: {
                path: "/commnets.CommentService/GetRepliesByCommentID",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetRepliesByCommentIDRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetRepliesByCommentIDRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetRepliesByCommentIDResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetRepliesByCommentIDResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateComment(call: grpc_1.ServerUnaryCall<CreateCommentRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract DeleteCommnet(call: grpc_1.ServerUnaryCall<DeleteCommnetRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract GetCommentsByArticleID(call: grpc_1.ServerUnaryCall<GetCommentsByArticleIDRequest, GetCommentsByArticleIDResponse>, callback: grpc_1.sendUnaryData<GetCommentsByArticleIDResponse>): void;
        abstract GetRepliesByCommentID(call: grpc_1.ServerUnaryCall<GetRepliesByCommentIDRequest, GetRepliesByCommentIDResponse>, callback: grpc_1.sendUnaryData<GetRepliesByCommentIDResponse>): void;
    }
    export class CommentServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedCommentServiceService.definition, "CommentService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateComment: GrpcUnaryServiceInterface<CreateCommentRequest, dependency_2.google.protobuf.Empty> = (message: CreateCommentRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.CreateComment(message, metadata, options, callback);
        };
        DeleteCommnet: GrpcUnaryServiceInterface<DeleteCommnetRequest, dependency_2.google.protobuf.Empty> = (message: DeleteCommnetRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.DeleteCommnet(message, metadata, options, callback);
        };
        GetCommentsByArticleID: GrpcUnaryServiceInterface<GetCommentsByArticleIDRequest, GetCommentsByArticleIDResponse> = (message: GetCommentsByArticleIDRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetCommentsByArticleIDResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetCommentsByArticleIDResponse>, callback?: grpc_1.requestCallback<GetCommentsByArticleIDResponse>): grpc_1.ClientUnaryCall => {
            return super.GetCommentsByArticleID(message, metadata, options, callback);
        };
        GetRepliesByCommentID: GrpcUnaryServiceInterface<GetRepliesByCommentIDRequest, GetRepliesByCommentIDResponse> = (message: GetRepliesByCommentIDRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetRepliesByCommentIDResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetRepliesByCommentIDResponse>, callback?: grpc_1.requestCallback<GetRepliesByCommentIDResponse>): grpc_1.ClientUnaryCall => {
            return super.GetRepliesByCommentID(message, metadata, options, callback);
        };
    }
}
