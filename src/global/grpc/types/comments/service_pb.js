// source: comments/service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.commnets.CommentElem', null, global);
goog.exportSymbol('proto.commnets.CreateCommentRequest', null, global);
goog.exportSymbol('proto.commnets.DeleteCommnetRequest', null, global);
goog.exportSymbol('proto.commnets.GetCommentsByArticleIDRequest', null, global);
goog.exportSymbol('proto.commnets.GetCommentsByArticleIDResponse', null, global);
goog.exportSymbol('proto.commnets.GetRepliesByCommentIDRequest', null, global);
goog.exportSymbol('proto.commnets.GetRepliesByCommentIDResponse', null, global);
goog.exportSymbol('proto.commnets.ReplyElem', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.commnets.CreateCommentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.commnets.CreateCommentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.commnets.CreateCommentRequest.displayName = 'proto.commnets.CreateCommentRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.commnets.DeleteCommnetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.commnets.DeleteCommnetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.commnets.DeleteCommnetRequest.displayName = 'proto.commnets.DeleteCommnetRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.commnets.GetCommentsByArticleIDRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.commnets.GetCommentsByArticleIDRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.commnets.GetCommentsByArticleIDRequest.displayName = 'proto.commnets.GetCommentsByArticleIDRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.commnets.CommentElem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.commnets.CommentElem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.commnets.CommentElem.displayName = 'proto.commnets.CommentElem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.commnets.GetCommentsByArticleIDResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.commnets.GetCommentsByArticleIDResponse.repeatedFields_, null);
};
goog.inherits(proto.commnets.GetCommentsByArticleIDResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.commnets.GetCommentsByArticleIDResponse.displayName = 'proto.commnets.GetCommentsByArticleIDResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.commnets.GetRepliesByCommentIDRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.commnets.GetRepliesByCommentIDRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.commnets.GetRepliesByCommentIDRequest.displayName = 'proto.commnets.GetRepliesByCommentIDRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.commnets.ReplyElem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.commnets.ReplyElem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.commnets.ReplyElem.displayName = 'proto.commnets.ReplyElem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.commnets.GetRepliesByCommentIDResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.commnets.GetRepliesByCommentIDResponse.repeatedFields_, null);
};
goog.inherits(proto.commnets.GetRepliesByCommentIDResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.commnets.GetRepliesByCommentIDResponse.displayName = 'proto.commnets.GetRepliesByCommentIDResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.commnets.CreateCommentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.commnets.CreateCommentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.commnets.CreateCommentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commnets.CreateCommentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    articleid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    authorid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    body: jspb.Message.getFieldWithDefault(msg, 3, ""),
    replyto: jspb.Message.getFieldWithDefault(msg, 4, 0),
    mentionuserid: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.commnets.CreateCommentRequest}
 */
proto.commnets.CreateCommentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.commnets.CreateCommentRequest;
  return proto.commnets.CreateCommentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.commnets.CreateCommentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.commnets.CreateCommentRequest}
 */
proto.commnets.CreateCommentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setArticleid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAuthorid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setReplyto(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMentionuserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.commnets.CreateCommentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.commnets.CreateCommentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.commnets.CreateCommentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commnets.CreateCommentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArticleid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getAuthorid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional uint32 articleID = 1;
 * @return {number}
 */
proto.commnets.CreateCommentRequest.prototype.getArticleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.commnets.CreateCommentRequest} returns this
 */
proto.commnets.CreateCommentRequest.prototype.setArticleid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 authorID = 2;
 * @return {number}
 */
proto.commnets.CreateCommentRequest.prototype.getAuthorid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.commnets.CreateCommentRequest} returns this
 */
proto.commnets.CreateCommentRequest.prototype.setAuthorid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string body = 3;
 * @return {string}
 */
proto.commnets.CreateCommentRequest.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.commnets.CreateCommentRequest} returns this
 */
proto.commnets.CreateCommentRequest.prototype.setBody = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 replyTo = 4;
 * @return {number}
 */
proto.commnets.CreateCommentRequest.prototype.getReplyto = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.commnets.CreateCommentRequest} returns this
 */
proto.commnets.CreateCommentRequest.prototype.setReplyto = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.commnets.CreateCommentRequest} returns this
 */
proto.commnets.CreateCommentRequest.prototype.clearReplyto = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.commnets.CreateCommentRequest.prototype.hasReplyto = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 mentionUserID = 5;
 * @return {number}
 */
proto.commnets.CreateCommentRequest.prototype.getMentionuserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.commnets.CreateCommentRequest} returns this
 */
proto.commnets.CreateCommentRequest.prototype.setMentionuserid = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.commnets.CreateCommentRequest} returns this
 */
proto.commnets.CreateCommentRequest.prototype.clearMentionuserid = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.commnets.CreateCommentRequest.prototype.hasMentionuserid = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.commnets.DeleteCommnetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.commnets.DeleteCommnetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.commnets.DeleteCommnetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commnets.DeleteCommnetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    commentid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    articleid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.commnets.DeleteCommnetRequest}
 */
proto.commnets.DeleteCommnetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.commnets.DeleteCommnetRequest;
  return proto.commnets.DeleteCommnetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.commnets.DeleteCommnetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.commnets.DeleteCommnetRequest}
 */
proto.commnets.DeleteCommnetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCommentid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setArticleid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.commnets.DeleteCommnetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.commnets.DeleteCommnetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.commnets.DeleteCommnetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commnets.DeleteCommnetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommentid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getArticleid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 commentID = 1;
 * @return {number}
 */
proto.commnets.DeleteCommnetRequest.prototype.getCommentid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.commnets.DeleteCommnetRequest} returns this
 */
proto.commnets.DeleteCommnetRequest.prototype.setCommentid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 articleID = 2;
 * @return {number}
 */
proto.commnets.DeleteCommnetRequest.prototype.getArticleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.commnets.DeleteCommnetRequest} returns this
 */
proto.commnets.DeleteCommnetRequest.prototype.setArticleid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 userID = 3;
 * @return {number}
 */
proto.commnets.DeleteCommnetRequest.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.commnets.DeleteCommnetRequest} returns this
 */
proto.commnets.DeleteCommnetRequest.prototype.setUserid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.commnets.GetCommentsByArticleIDRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.commnets.GetCommentsByArticleIDRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.commnets.GetCommentsByArticleIDRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commnets.GetCommentsByArticleIDRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    articleid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.commnets.GetCommentsByArticleIDRequest}
 */
proto.commnets.GetCommentsByArticleIDRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.commnets.GetCommentsByArticleIDRequest;
  return proto.commnets.GetCommentsByArticleIDRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.commnets.GetCommentsByArticleIDRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.commnets.GetCommentsByArticleIDRequest}
 */
proto.commnets.GetCommentsByArticleIDRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setArticleid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.commnets.GetCommentsByArticleIDRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.commnets.GetCommentsByArticleIDRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.commnets.GetCommentsByArticleIDRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commnets.GetCommentsByArticleIDRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArticleid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 articleID = 1;
 * @return {number}
 */
proto.commnets.GetCommentsByArticleIDRequest.prototype.getArticleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.commnets.GetCommentsByArticleIDRequest} returns this
 */
proto.commnets.GetCommentsByArticleIDRequest.prototype.setArticleid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 userID = 2;
 * @return {number}
 */
proto.commnets.GetCommentsByArticleIDRequest.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.commnets.GetCommentsByArticleIDRequest} returns this
 */
proto.commnets.GetCommentsByArticleIDRequest.prototype.setUserid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.commnets.GetCommentsByArticleIDRequest} returns this
 */
proto.commnets.GetCommentsByArticleIDRequest.prototype.clearUserid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.commnets.GetCommentsByArticleIDRequest.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.commnets.CommentElem.prototype.toObject = function(opt_includeInstance) {
  return proto.commnets.CommentElem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.commnets.CommentElem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commnets.CommentElem.toObject = function(includeInstance, msg) {
  var f, obj = {
    commentid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    authorid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    body: jspb.Message.getFieldWithDefault(msg, 3, ""),
    createdat: (f = msg.getCreatedat()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    replycount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    mentionuserid: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.commnets.CommentElem}
 */
proto.commnets.CommentElem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.commnets.CommentElem;
  return proto.commnets.CommentElem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.commnets.CommentElem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.commnets.CommentElem}
 */
proto.commnets.CommentElem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCommentid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAuthorid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedat(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setReplycount(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMentionuserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.commnets.CommentElem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.commnets.CommentElem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.commnets.CommentElem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commnets.CommentElem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommentid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getAuthorid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCreatedat();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getReplycount();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional uint32 commentID = 1;
 * @return {number}
 */
proto.commnets.CommentElem.prototype.getCommentid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.commnets.CommentElem} returns this
 */
proto.commnets.CommentElem.prototype.setCommentid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 authorID = 2;
 * @return {number}
 */
proto.commnets.CommentElem.prototype.getAuthorid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.commnets.CommentElem} returns this
 */
proto.commnets.CommentElem.prototype.setAuthorid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string body = 3;
 * @return {string}
 */
proto.commnets.CommentElem.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.commnets.CommentElem} returns this
 */
proto.commnets.CommentElem.prototype.setBody = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp createdAt = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.commnets.CommentElem.prototype.getCreatedat = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.commnets.CommentElem} returns this
*/
proto.commnets.CommentElem.prototype.setCreatedat = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.commnets.CommentElem} returns this
 */
proto.commnets.CommentElem.prototype.clearCreatedat = function() {
  return this.setCreatedat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.commnets.CommentElem.prototype.hasCreatedat = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 replyCount = 5;
 * @return {number}
 */
proto.commnets.CommentElem.prototype.getReplycount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.commnets.CommentElem} returns this
 */
proto.commnets.CommentElem.prototype.setReplycount = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 mentionUserID = 6;
 * @return {number}
 */
proto.commnets.CommentElem.prototype.getMentionuserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.commnets.CommentElem} returns this
 */
proto.commnets.CommentElem.prototype.setMentionuserid = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.commnets.CommentElem} returns this
 */
proto.commnets.CommentElem.prototype.clearMentionuserid = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.commnets.CommentElem.prototype.hasMentionuserid = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.commnets.GetCommentsByArticleIDResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.commnets.GetCommentsByArticleIDResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.commnets.GetCommentsByArticleIDResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.commnets.GetCommentsByArticleIDResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commnets.GetCommentsByArticleIDResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    commentsList: jspb.Message.toObjectList(msg.getCommentsList(),
    proto.commnets.CommentElem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.commnets.GetCommentsByArticleIDResponse}
 */
proto.commnets.GetCommentsByArticleIDResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.commnets.GetCommentsByArticleIDResponse;
  return proto.commnets.GetCommentsByArticleIDResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.commnets.GetCommentsByArticleIDResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.commnets.GetCommentsByArticleIDResponse}
 */
proto.commnets.GetCommentsByArticleIDResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.commnets.CommentElem;
      reader.readMessage(value,proto.commnets.CommentElem.deserializeBinaryFromReader);
      msg.addComments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.commnets.GetCommentsByArticleIDResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.commnets.GetCommentsByArticleIDResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.commnets.GetCommentsByArticleIDResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commnets.GetCommentsByArticleIDResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.commnets.CommentElem.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CommentElem comments = 1;
 * @return {!Array<!proto.commnets.CommentElem>}
 */
proto.commnets.GetCommentsByArticleIDResponse.prototype.getCommentsList = function() {
  return /** @type{!Array<!proto.commnets.CommentElem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.commnets.CommentElem, 1));
};


/**
 * @param {!Array<!proto.commnets.CommentElem>} value
 * @return {!proto.commnets.GetCommentsByArticleIDResponse} returns this
*/
proto.commnets.GetCommentsByArticleIDResponse.prototype.setCommentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.commnets.CommentElem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.commnets.CommentElem}
 */
proto.commnets.GetCommentsByArticleIDResponse.prototype.addComments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.commnets.CommentElem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.commnets.GetCommentsByArticleIDResponse} returns this
 */
proto.commnets.GetCommentsByArticleIDResponse.prototype.clearCommentsList = function() {
  return this.setCommentsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.commnets.GetRepliesByCommentIDRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.commnets.GetRepliesByCommentIDRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.commnets.GetRepliesByCommentIDRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commnets.GetRepliesByCommentIDRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    commentid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    articleid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.commnets.GetRepliesByCommentIDRequest}
 */
proto.commnets.GetRepliesByCommentIDRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.commnets.GetRepliesByCommentIDRequest;
  return proto.commnets.GetRepliesByCommentIDRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.commnets.GetRepliesByCommentIDRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.commnets.GetRepliesByCommentIDRequest}
 */
proto.commnets.GetRepliesByCommentIDRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCommentid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setArticleid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.commnets.GetRepliesByCommentIDRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.commnets.GetRepliesByCommentIDRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.commnets.GetRepliesByCommentIDRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commnets.GetRepliesByCommentIDRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommentid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getArticleid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 commentID = 1;
 * @return {number}
 */
proto.commnets.GetRepliesByCommentIDRequest.prototype.getCommentid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.commnets.GetRepliesByCommentIDRequest} returns this
 */
proto.commnets.GetRepliesByCommentIDRequest.prototype.setCommentid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 articleID = 2;
 * @return {number}
 */
proto.commnets.GetRepliesByCommentIDRequest.prototype.getArticleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.commnets.GetRepliesByCommentIDRequest} returns this
 */
proto.commnets.GetRepliesByCommentIDRequest.prototype.setArticleid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 userID = 3;
 * @return {number}
 */
proto.commnets.GetRepliesByCommentIDRequest.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.commnets.GetRepliesByCommentIDRequest} returns this
 */
proto.commnets.GetRepliesByCommentIDRequest.prototype.setUserid = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.commnets.GetRepliesByCommentIDRequest} returns this
 */
proto.commnets.GetRepliesByCommentIDRequest.prototype.clearUserid = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.commnets.GetRepliesByCommentIDRequest.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.commnets.ReplyElem.prototype.toObject = function(opt_includeInstance) {
  return proto.commnets.ReplyElem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.commnets.ReplyElem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commnets.ReplyElem.toObject = function(includeInstance, msg) {
  var f, obj = {
    commentid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    authorid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    body: jspb.Message.getFieldWithDefault(msg, 3, ""),
    createdat: (f = msg.getCreatedat()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    mentionuserid: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.commnets.ReplyElem}
 */
proto.commnets.ReplyElem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.commnets.ReplyElem;
  return proto.commnets.ReplyElem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.commnets.ReplyElem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.commnets.ReplyElem}
 */
proto.commnets.ReplyElem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCommentid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAuthorid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedat(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMentionuserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.commnets.ReplyElem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.commnets.ReplyElem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.commnets.ReplyElem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commnets.ReplyElem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommentid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getAuthorid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCreatedat();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional uint32 commentID = 1;
 * @return {number}
 */
proto.commnets.ReplyElem.prototype.getCommentid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.commnets.ReplyElem} returns this
 */
proto.commnets.ReplyElem.prototype.setCommentid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 authorID = 2;
 * @return {number}
 */
proto.commnets.ReplyElem.prototype.getAuthorid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.commnets.ReplyElem} returns this
 */
proto.commnets.ReplyElem.prototype.setAuthorid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string body = 3;
 * @return {string}
 */
proto.commnets.ReplyElem.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.commnets.ReplyElem} returns this
 */
proto.commnets.ReplyElem.prototype.setBody = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp createdAt = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.commnets.ReplyElem.prototype.getCreatedat = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.commnets.ReplyElem} returns this
*/
proto.commnets.ReplyElem.prototype.setCreatedat = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.commnets.ReplyElem} returns this
 */
proto.commnets.ReplyElem.prototype.clearCreatedat = function() {
  return this.setCreatedat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.commnets.ReplyElem.prototype.hasCreatedat = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 mentionUserID = 5;
 * @return {number}
 */
proto.commnets.ReplyElem.prototype.getMentionuserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.commnets.ReplyElem} returns this
 */
proto.commnets.ReplyElem.prototype.setMentionuserid = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.commnets.ReplyElem} returns this
 */
proto.commnets.ReplyElem.prototype.clearMentionuserid = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.commnets.ReplyElem.prototype.hasMentionuserid = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.commnets.GetRepliesByCommentIDResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.commnets.GetRepliesByCommentIDResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.commnets.GetRepliesByCommentIDResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.commnets.GetRepliesByCommentIDResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commnets.GetRepliesByCommentIDResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    repliesList: jspb.Message.toObjectList(msg.getRepliesList(),
    proto.commnets.ReplyElem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.commnets.GetRepliesByCommentIDResponse}
 */
proto.commnets.GetRepliesByCommentIDResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.commnets.GetRepliesByCommentIDResponse;
  return proto.commnets.GetRepliesByCommentIDResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.commnets.GetRepliesByCommentIDResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.commnets.GetRepliesByCommentIDResponse}
 */
proto.commnets.GetRepliesByCommentIDResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.commnets.ReplyElem;
      reader.readMessage(value,proto.commnets.ReplyElem.deserializeBinaryFromReader);
      msg.addReplies(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.commnets.GetRepliesByCommentIDResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.commnets.GetRepliesByCommentIDResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.commnets.GetRepliesByCommentIDResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.commnets.GetRepliesByCommentIDResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRepliesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.commnets.ReplyElem.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ReplyElem replies = 1;
 * @return {!Array<!proto.commnets.ReplyElem>}
 */
proto.commnets.GetRepliesByCommentIDResponse.prototype.getRepliesList = function() {
  return /** @type{!Array<!proto.commnets.ReplyElem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.commnets.ReplyElem, 1));
};


/**
 * @param {!Array<!proto.commnets.ReplyElem>} value
 * @return {!proto.commnets.GetRepliesByCommentIDResponse} returns this
*/
proto.commnets.GetRepliesByCommentIDResponse.prototype.setRepliesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.commnets.ReplyElem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.commnets.ReplyElem}
 */
proto.commnets.GetRepliesByCommentIDResponse.prototype.addReplies = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.commnets.ReplyElem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.commnets.GetRepliesByCommentIDResponse} returns this
 */
proto.commnets.GetRepliesByCommentIDResponse.prototype.clearRepliesList = function() {
  return this.setRepliesList([]);
};


goog.object.extend(exports, proto.commnets);
