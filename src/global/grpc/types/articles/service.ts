/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: articles/service.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../google/protobuf/timestamp";
import * as dependency_2 from "./../google/protobuf/empty";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace articles {
    export enum ArticleType {
        GENERAL = 0,
        TECH = 1
    }
    export enum ListArticleOrder {
        TIME = 0,
        VIEWS = 1,
        LIKES = 2
    }
    export class Duration extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            start?: dependency_1.google.protobuf.Timestamp;
            end?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("start" in data && data.start != undefined) {
                    this.start = data.start;
                }
                if ("end" in data && data.end != undefined) {
                    this.end = data.end;
                }
            }
        }
        get start() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 1) as dependency_1.google.protobuf.Timestamp;
        }
        set start(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_start() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get end() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 2) as dependency_1.google.protobuf.Timestamp;
        }
        set end(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_end() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            start?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            end?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): Duration {
            const message = new Duration({});
            if (data.start != null) {
                message.start = dependency_1.google.protobuf.Timestamp.fromObject(data.start);
            }
            if (data.end != null) {
                message.end = dependency_1.google.protobuf.Timestamp.fromObject(data.end);
            }
            return message;
        }
        toObject() {
            const data: {
                start?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                end?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.start != null) {
                data.start = this.start.toObject();
            }
            if (this.end != null) {
                data.end = this.end.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_start)
                writer.writeMessage(1, this.start, () => this.start.serialize(writer));
            if (this.has_end)
                writer.writeMessage(2, this.end, () => this.end.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Duration {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Duration();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.start, () => message.start = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.end, () => message.end = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Duration {
            return Duration.deserialize(bytes);
        }
    }
    export class CreateArticleRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            authorID?: number;
            type?: ArticleType;
            title?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("authorID" in data && data.authorID != undefined) {
                    this.authorID = data.authorID;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
            }
        }
        get authorID() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set authorID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 2, ArticleType.GENERAL) as ArticleType;
        }
        set type(value: ArticleType) {
            pb_1.Message.setField(this, 2, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            authorID?: number;
            type?: ArticleType;
            title?: string;
        }): CreateArticleRequest {
            const message = new CreateArticleRequest({});
            if (data.authorID != null) {
                message.authorID = data.authorID;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            return message;
        }
        toObject() {
            const data: {
                authorID?: number;
                type?: ArticleType;
                title?: string;
            } = {};
            if (this.authorID != null) {
                data.authorID = this.authorID;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.authorID != 0)
                writer.writeUint32(1, this.authorID);
            if (this.type != ArticleType.GENERAL)
                writer.writeEnum(2, this.type);
            if (this.title.length)
                writer.writeString(3, this.title);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateArticleRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateArticleRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.authorID = reader.readUint32();
                        break;
                    case 2:
                        message.type = reader.readEnum();
                        break;
                    case 3:
                        message.title = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateArticleRequest {
            return CreateArticleRequest.deserialize(bytes);
        }
    }
    export class CreateArticleResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            articleID?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("articleID" in data && data.articleID != undefined) {
                    this.articleID = data.articleID;
                }
            }
        }
        get articleID() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set articleID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            articleID?: number;
        }): CreateArticleResponse {
            const message = new CreateArticleResponse({});
            if (data.articleID != null) {
                message.articleID = data.articleID;
            }
            return message;
        }
        toObject() {
            const data: {
                articleID?: number;
            } = {};
            if (this.articleID != null) {
                data.articleID = this.articleID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.articleID != 0)
                writer.writeUint32(1, this.articleID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateArticleResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateArticleResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.articleID = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateArticleResponse {
            return CreateArticleResponse.deserialize(bytes);
        }
    }
    export class ListArticleRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[4], [6], [7], [8]];
        constructor(data?: any[] | ({
            offset?: number;
            amount?: number;
            order?: ListArticleOrder;
            type?: ArticleType;
        } & (({
            userID?: number;
        }) | ({
            authorID?: number;
        }) | ({
            duration?: Duration;
        }) | ({
            query?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("offset" in data && data.offset != undefined) {
                    this.offset = data.offset;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("order" in data && data.order != undefined) {
                    this.order = data.order;
                }
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("authorID" in data && data.authorID != undefined) {
                    this.authorID = data.authorID;
                }
                if ("duration" in data && data.duration != undefined) {
                    this.duration = data.duration;
                }
                if ("query" in data && data.query != undefined) {
                    this.query = data.query;
                }
            }
        }
        get offset() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set offset(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set amount(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get order() {
            return pb_1.Message.getFieldWithDefault(this, 3, ListArticleOrder.TIME) as ListArticleOrder;
        }
        set order(value: ListArticleOrder) {
            pb_1.Message.setField(this, 3, value);
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
        }
        get has_userID() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 5, ArticleType.GENERAL) as ArticleType;
        }
        set type(value: ArticleType) {
            pb_1.Message.setField(this, 5, value);
        }
        get authorID() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set authorID(value: number) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[1], value);
        }
        get has_authorID() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get duration() {
            return pb_1.Message.getWrapperField(this, Duration, 7) as Duration;
        }
        set duration(value: Duration) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[2], value);
        }
        get has_duration() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get query() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set query(value: string) {
            pb_1.Message.setOneofField(this, 8, this.#one_of_decls[3], value);
        }
        get has_query() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get _userID() {
            const cases: {
                [index: number]: "none" | "userID";
            } = {
                0: "none",
                4: "userID"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        get _authorID() {
            const cases: {
                [index: number]: "none" | "authorID";
            } = {
                0: "none",
                6: "authorID"
            };
            return cases[pb_1.Message.computeOneofCase(this, [6])];
        }
        get _duration() {
            const cases: {
                [index: number]: "none" | "duration";
            } = {
                0: "none",
                7: "duration"
            };
            return cases[pb_1.Message.computeOneofCase(this, [7])];
        }
        get _query() {
            const cases: {
                [index: number]: "none" | "query";
            } = {
                0: "none",
                8: "query"
            };
            return cases[pb_1.Message.computeOneofCase(this, [8])];
        }
        static fromObject(data: {
            offset?: number;
            amount?: number;
            order?: ListArticleOrder;
            userID?: number;
            type?: ArticleType;
            authorID?: number;
            duration?: ReturnType<typeof Duration.prototype.toObject>;
            query?: string;
        }): ListArticleRequest {
            const message = new ListArticleRequest({});
            if (data.offset != null) {
                message.offset = data.offset;
            }
            if (data.amount != null) {
                message.amount = data.amount;
            }
            if (data.order != null) {
                message.order = data.order;
            }
            if (data.userID != null) {
                message.userID = data.userID;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.authorID != null) {
                message.authorID = data.authorID;
            }
            if (data.duration != null) {
                message.duration = Duration.fromObject(data.duration);
            }
            if (data.query != null) {
                message.query = data.query;
            }
            return message;
        }
        toObject() {
            const data: {
                offset?: number;
                amount?: number;
                order?: ListArticleOrder;
                userID?: number;
                type?: ArticleType;
                authorID?: number;
                duration?: ReturnType<typeof Duration.prototype.toObject>;
                query?: string;
            } = {};
            if (this.offset != null) {
                data.offset = this.offset;
            }
            if (this.amount != null) {
                data.amount = this.amount;
            }
            if (this.order != null) {
                data.order = this.order;
            }
            if (this.userID != null) {
                data.userID = this.userID;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.authorID != null) {
                data.authorID = this.authorID;
            }
            if (this.duration != null) {
                data.duration = this.duration.toObject();
            }
            if (this.query != null) {
                data.query = this.query;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.offset != 0)
                writer.writeUint32(1, this.offset);
            if (this.amount != 0)
                writer.writeUint32(2, this.amount);
            if (this.order != ListArticleOrder.TIME)
                writer.writeEnum(3, this.order);
            if (this.has_userID)
                writer.writeUint32(4, this.userID);
            if (this.type != ArticleType.GENERAL)
                writer.writeEnum(5, this.type);
            if (this.has_authorID)
                writer.writeUint32(6, this.authorID);
            if (this.has_duration)
                writer.writeMessage(7, this.duration, () => this.duration.serialize(writer));
            if (this.has_query)
                writer.writeString(8, this.query);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListArticleRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListArticleRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.offset = reader.readUint32();
                        break;
                    case 2:
                        message.amount = reader.readUint32();
                        break;
                    case 3:
                        message.order = reader.readEnum();
                        break;
                    case 4:
                        message.userID = reader.readUint32();
                        break;
                    case 5:
                        message.type = reader.readEnum();
                        break;
                    case 6:
                        message.authorID = reader.readUint32();
                        break;
                    case 7:
                        reader.readMessage(message.duration, () => message.duration = Duration.deserialize(reader));
                        break;
                    case 8:
                        message.query = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListArticleRequest {
            return ListArticleRequest.deserialize(bytes);
        }
    }
    export class ListArticleElement extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            articleID?: number;
            authorID?: number;
            title?: string;
            summary?: string;
            type?: ArticleType;
            createdAt?: dependency_1.google.protobuf.Timestamp;
            isAuthor?: boolean;
            isPrivate?: boolean;
            views?: number;
            likes?: number;
            comments?: number;
            thumbnail?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("articleID" in data && data.articleID != undefined) {
                    this.articleID = data.articleID;
                }
                if ("authorID" in data && data.authorID != undefined) {
                    this.authorID = data.authorID;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("summary" in data && data.summary != undefined) {
                    this.summary = data.summary;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("createdAt" in data && data.createdAt != undefined) {
                    this.createdAt = data.createdAt;
                }
                if ("isAuthor" in data && data.isAuthor != undefined) {
                    this.isAuthor = data.isAuthor;
                }
                if ("isPrivate" in data && data.isPrivate != undefined) {
                    this.isPrivate = data.isPrivate;
                }
                if ("views" in data && data.views != undefined) {
                    this.views = data.views;
                }
                if ("likes" in data && data.likes != undefined) {
                    this.likes = data.likes;
                }
                if ("comments" in data && data.comments != undefined) {
                    this.comments = data.comments;
                }
                if ("thumbnail" in data && data.thumbnail != undefined) {
                    this.thumbnail = data.thumbnail;
                }
            }
        }
        get articleID() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set articleID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get authorID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set authorID(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get summary() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set summary(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 5, ArticleType.GENERAL) as ArticleType;
        }
        set type(value: ArticleType) {
            pb_1.Message.setField(this, 5, value);
        }
        get createdAt() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 6) as dependency_1.google.protobuf.Timestamp;
        }
        set createdAt(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_createdAt() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get isAuthor() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set isAuthor(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get isPrivate() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set isPrivate(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        get views() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set views(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get likes() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set likes(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get comments() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set comments(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get thumbnail() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set thumbnail(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        static fromObject(data: {
            articleID?: number;
            authorID?: number;
            title?: string;
            summary?: string;
            type?: ArticleType;
            createdAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            isAuthor?: boolean;
            isPrivate?: boolean;
            views?: number;
            likes?: number;
            comments?: number;
            thumbnail?: string;
        }): ListArticleElement {
            const message = new ListArticleElement({});
            if (data.articleID != null) {
                message.articleID = data.articleID;
            }
            if (data.authorID != null) {
                message.authorID = data.authorID;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.summary != null) {
                message.summary = data.summary;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.createdAt != null) {
                message.createdAt = dependency_1.google.protobuf.Timestamp.fromObject(data.createdAt);
            }
            if (data.isAuthor != null) {
                message.isAuthor = data.isAuthor;
            }
            if (data.isPrivate != null) {
                message.isPrivate = data.isPrivate;
            }
            if (data.views != null) {
                message.views = data.views;
            }
            if (data.likes != null) {
                message.likes = data.likes;
            }
            if (data.comments != null) {
                message.comments = data.comments;
            }
            if (data.thumbnail != null) {
                message.thumbnail = data.thumbnail;
            }
            return message;
        }
        toObject() {
            const data: {
                articleID?: number;
                authorID?: number;
                title?: string;
                summary?: string;
                type?: ArticleType;
                createdAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                isAuthor?: boolean;
                isPrivate?: boolean;
                views?: number;
                likes?: number;
                comments?: number;
                thumbnail?: string;
            } = {};
            if (this.articleID != null) {
                data.articleID = this.articleID;
            }
            if (this.authorID != null) {
                data.authorID = this.authorID;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.summary != null) {
                data.summary = this.summary;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.createdAt != null) {
                data.createdAt = this.createdAt.toObject();
            }
            if (this.isAuthor != null) {
                data.isAuthor = this.isAuthor;
            }
            if (this.isPrivate != null) {
                data.isPrivate = this.isPrivate;
            }
            if (this.views != null) {
                data.views = this.views;
            }
            if (this.likes != null) {
                data.likes = this.likes;
            }
            if (this.comments != null) {
                data.comments = this.comments;
            }
            if (this.thumbnail != null) {
                data.thumbnail = this.thumbnail;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.articleID != 0)
                writer.writeUint32(1, this.articleID);
            if (this.authorID != 0)
                writer.writeUint32(2, this.authorID);
            if (this.title.length)
                writer.writeString(3, this.title);
            if (this.summary.length)
                writer.writeString(4, this.summary);
            if (this.type != ArticleType.GENERAL)
                writer.writeEnum(5, this.type);
            if (this.has_createdAt)
                writer.writeMessage(6, this.createdAt, () => this.createdAt.serialize(writer));
            if (this.isAuthor != false)
                writer.writeBool(7, this.isAuthor);
            if (this.isPrivate != false)
                writer.writeBool(8, this.isPrivate);
            if (this.views != 0)
                writer.writeUint64(9, this.views);
            if (this.likes != 0)
                writer.writeUint32(10, this.likes);
            if (this.comments != 0)
                writer.writeUint32(11, this.comments);
            if (this.thumbnail.length)
                writer.writeString(12, this.thumbnail);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListArticleElement {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListArticleElement();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.articleID = reader.readUint32();
                        break;
                    case 2:
                        message.authorID = reader.readUint32();
                        break;
                    case 3:
                        message.title = reader.readString();
                        break;
                    case 4:
                        message.summary = reader.readString();
                        break;
                    case 5:
                        message.type = reader.readEnum();
                        break;
                    case 6:
                        reader.readMessage(message.createdAt, () => message.createdAt = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 7:
                        message.isAuthor = reader.readBool();
                        break;
                    case 8:
                        message.isPrivate = reader.readBool();
                        break;
                    case 9:
                        message.views = reader.readUint64();
                        break;
                    case 10:
                        message.likes = reader.readUint32();
                        break;
                    case 11:
                        message.comments = reader.readUint32();
                        break;
                    case 12:
                        message.thumbnail = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListArticleElement {
            return ListArticleElement.deserialize(bytes);
        }
    }
    export class ListArticleResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            articles?: ListArticleElement[];
            totalCount?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("articles" in data && data.articles != undefined) {
                    this.articles = data.articles;
                }
                if ("totalCount" in data && data.totalCount != undefined) {
                    this.totalCount = data.totalCount;
                }
            }
        }
        get articles() {
            return pb_1.Message.getRepeatedWrapperField(this, ListArticleElement, 1) as ListArticleElement[];
        }
        set articles(value: ListArticleElement[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get totalCount() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set totalCount(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            articles?: ReturnType<typeof ListArticleElement.prototype.toObject>[];
            totalCount?: number;
        }): ListArticleResponse {
            const message = new ListArticleResponse({});
            if (data.articles != null) {
                message.articles = data.articles.map(item => ListArticleElement.fromObject(item));
            }
            if (data.totalCount != null) {
                message.totalCount = data.totalCount;
            }
            return message;
        }
        toObject() {
            const data: {
                articles?: ReturnType<typeof ListArticleElement.prototype.toObject>[];
                totalCount?: number;
            } = {};
            if (this.articles != null) {
                data.articles = this.articles.map((item: ListArticleElement) => item.toObject());
            }
            if (this.totalCount != null) {
                data.totalCount = this.totalCount;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.articles.length)
                writer.writeRepeatedMessage(1, this.articles, (item: ListArticleElement) => item.serialize(writer));
            if (this.totalCount != 0)
                writer.writeUint32(2, this.totalCount);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListArticleResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListArticleResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.articles, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ListArticleElement.deserialize(reader), ListArticleElement));
                        break;
                    case 2:
                        message.totalCount = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListArticleResponse {
            return ListArticleResponse.deserialize(bytes);
        }
    }
    export class ListArticleByAuthorRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[5], [7], [8], [9]];
        constructor(data?: any[] | ({
            offset?: number;
            amount?: number;
            order?: ListArticleOrder;
            authorID?: number;
            type?: ArticleType;
        } & (({
            userID?: number;
        }) | ({
            isPrivate?: boolean;
        }) | ({
            duration?: Duration;
        }) | ({
            query?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("offset" in data && data.offset != undefined) {
                    this.offset = data.offset;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("order" in data && data.order != undefined) {
                    this.order = data.order;
                }
                if ("authorID" in data && data.authorID != undefined) {
                    this.authorID = data.authorID;
                }
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("isPrivate" in data && data.isPrivate != undefined) {
                    this.isPrivate = data.isPrivate;
                }
                if ("duration" in data && data.duration != undefined) {
                    this.duration = data.duration;
                }
                if ("query" in data && data.query != undefined) {
                    this.query = data.query;
                }
            }
        }
        get offset() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set offset(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set amount(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get order() {
            return pb_1.Message.getFieldWithDefault(this, 3, ListArticleOrder.TIME) as ListArticleOrder;
        }
        set order(value: ListArticleOrder) {
            pb_1.Message.setField(this, 3, value);
        }
        get authorID() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set authorID(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[0], value);
        }
        get has_userID() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 6, ArticleType.GENERAL) as ArticleType;
        }
        set type(value: ArticleType) {
            pb_1.Message.setField(this, 6, value);
        }
        get isPrivate() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set isPrivate(value: boolean) {
            pb_1.Message.setOneofField(this, 7, this.#one_of_decls[1], value);
        }
        get has_isPrivate() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get duration() {
            return pb_1.Message.getWrapperField(this, Duration, 8) as Duration;
        }
        set duration(value: Duration) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[2], value);
        }
        get has_duration() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get query() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set query(value: string) {
            pb_1.Message.setOneofField(this, 9, this.#one_of_decls[3], value);
        }
        get has_query() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get _userID() {
            const cases: {
                [index: number]: "none" | "userID";
            } = {
                0: "none",
                5: "userID"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        get _isPrivate() {
            const cases: {
                [index: number]: "none" | "isPrivate";
            } = {
                0: "none",
                7: "isPrivate"
            };
            return cases[pb_1.Message.computeOneofCase(this, [7])];
        }
        get _duration() {
            const cases: {
                [index: number]: "none" | "duration";
            } = {
                0: "none",
                8: "duration"
            };
            return cases[pb_1.Message.computeOneofCase(this, [8])];
        }
        get _query() {
            const cases: {
                [index: number]: "none" | "query";
            } = {
                0: "none",
                9: "query"
            };
            return cases[pb_1.Message.computeOneofCase(this, [9])];
        }
        static fromObject(data: {
            offset?: number;
            amount?: number;
            order?: ListArticleOrder;
            authorID?: number;
            userID?: number;
            type?: ArticleType;
            isPrivate?: boolean;
            duration?: ReturnType<typeof Duration.prototype.toObject>;
            query?: string;
        }): ListArticleByAuthorRequest {
            const message = new ListArticleByAuthorRequest({});
            if (data.offset != null) {
                message.offset = data.offset;
            }
            if (data.amount != null) {
                message.amount = data.amount;
            }
            if (data.order != null) {
                message.order = data.order;
            }
            if (data.authorID != null) {
                message.authorID = data.authorID;
            }
            if (data.userID != null) {
                message.userID = data.userID;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.isPrivate != null) {
                message.isPrivate = data.isPrivate;
            }
            if (data.duration != null) {
                message.duration = Duration.fromObject(data.duration);
            }
            if (data.query != null) {
                message.query = data.query;
            }
            return message;
        }
        toObject() {
            const data: {
                offset?: number;
                amount?: number;
                order?: ListArticleOrder;
                authorID?: number;
                userID?: number;
                type?: ArticleType;
                isPrivate?: boolean;
                duration?: ReturnType<typeof Duration.prototype.toObject>;
                query?: string;
            } = {};
            if (this.offset != null) {
                data.offset = this.offset;
            }
            if (this.amount != null) {
                data.amount = this.amount;
            }
            if (this.order != null) {
                data.order = this.order;
            }
            if (this.authorID != null) {
                data.authorID = this.authorID;
            }
            if (this.userID != null) {
                data.userID = this.userID;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.isPrivate != null) {
                data.isPrivate = this.isPrivate;
            }
            if (this.duration != null) {
                data.duration = this.duration.toObject();
            }
            if (this.query != null) {
                data.query = this.query;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.offset != 0)
                writer.writeUint32(1, this.offset);
            if (this.amount != 0)
                writer.writeUint32(2, this.amount);
            if (this.order != ListArticleOrder.TIME)
                writer.writeEnum(3, this.order);
            if (this.authorID != 0)
                writer.writeUint32(4, this.authorID);
            if (this.has_userID)
                writer.writeUint32(5, this.userID);
            if (this.type != ArticleType.GENERAL)
                writer.writeEnum(6, this.type);
            if (this.has_isPrivate)
                writer.writeBool(7, this.isPrivate);
            if (this.has_duration)
                writer.writeMessage(8, this.duration, () => this.duration.serialize(writer));
            if (this.has_query)
                writer.writeString(9, this.query);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListArticleByAuthorRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListArticleByAuthorRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.offset = reader.readUint32();
                        break;
                    case 2:
                        message.amount = reader.readUint32();
                        break;
                    case 3:
                        message.order = reader.readEnum();
                        break;
                    case 4:
                        message.authorID = reader.readUint32();
                        break;
                    case 5:
                        message.userID = reader.readUint32();
                        break;
                    case 6:
                        message.type = reader.readEnum();
                        break;
                    case 7:
                        message.isPrivate = reader.readBool();
                        break;
                    case 8:
                        reader.readMessage(message.duration, () => message.duration = Duration.deserialize(reader));
                        break;
                    case 9:
                        message.query = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListArticleByAuthorRequest {
            return ListArticleByAuthorRequest.deserialize(bytes);
        }
    }
    export class GetArticleRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[2]];
        constructor(data?: any[] | ({
            articleID?: number;
        } & (({
            userID?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("articleID" in data && data.articleID != undefined) {
                    this.articleID = data.articleID;
                }
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
            }
        }
        get articleID() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set articleID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_userID() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _userID() {
            const cases: {
                [index: number]: "none" | "userID";
            } = {
                0: "none",
                2: "userID"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            articleID?: number;
            userID?: number;
        }): GetArticleRequest {
            const message = new GetArticleRequest({});
            if (data.articleID != null) {
                message.articleID = data.articleID;
            }
            if (data.userID != null) {
                message.userID = data.userID;
            }
            return message;
        }
        toObject() {
            const data: {
                articleID?: number;
                userID?: number;
            } = {};
            if (this.articleID != null) {
                data.articleID = this.articleID;
            }
            if (this.userID != null) {
                data.userID = this.userID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.articleID != 0)
                writer.writeUint32(1, this.articleID);
            if (this.has_userID)
                writer.writeUint32(2, this.userID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetArticleRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetArticleRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.articleID = reader.readUint32();
                        break;
                    case 2:
                        message.userID = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetArticleRequest {
            return GetArticleRequest.deserialize(bytes);
        }
    }
    export class GetArticleResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            articleID?: number;
            authorID?: number;
            type?: ArticleType;
            title?: string;
            createdAt?: dependency_1.google.protobuf.Timestamp;
            updatedAt?: dependency_1.google.protobuf.Timestamp;
            body?: string;
            views?: number;
            likes?: number;
            comments?: number;
            isPrivate?: boolean;
            isLiked?: boolean;
            isAuthor?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("articleID" in data && data.articleID != undefined) {
                    this.articleID = data.articleID;
                }
                if ("authorID" in data && data.authorID != undefined) {
                    this.authorID = data.authorID;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("createdAt" in data && data.createdAt != undefined) {
                    this.createdAt = data.createdAt;
                }
                if ("updatedAt" in data && data.updatedAt != undefined) {
                    this.updatedAt = data.updatedAt;
                }
                if ("body" in data && data.body != undefined) {
                    this.body = data.body;
                }
                if ("views" in data && data.views != undefined) {
                    this.views = data.views;
                }
                if ("likes" in data && data.likes != undefined) {
                    this.likes = data.likes;
                }
                if ("comments" in data && data.comments != undefined) {
                    this.comments = data.comments;
                }
                if ("isPrivate" in data && data.isPrivate != undefined) {
                    this.isPrivate = data.isPrivate;
                }
                if ("isLiked" in data && data.isLiked != undefined) {
                    this.isLiked = data.isLiked;
                }
                if ("isAuthor" in data && data.isAuthor != undefined) {
                    this.isAuthor = data.isAuthor;
                }
            }
        }
        get articleID() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set articleID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get authorID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set authorID(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 3, ArticleType.GENERAL) as ArticleType;
        }
        set type(value: ArticleType) {
            pb_1.Message.setField(this, 3, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get createdAt() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 5) as dependency_1.google.protobuf.Timestamp;
        }
        set createdAt(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_createdAt() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get updatedAt() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 6) as dependency_1.google.protobuf.Timestamp;
        }
        set updatedAt(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_updatedAt() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get body() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set body(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get views() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set views(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get likes() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set likes(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get comments() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set comments(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get isPrivate() {
            return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
        }
        set isPrivate(value: boolean) {
            pb_1.Message.setField(this, 11, value);
        }
        get isLiked() {
            return pb_1.Message.getFieldWithDefault(this, 12, false) as boolean;
        }
        set isLiked(value: boolean) {
            pb_1.Message.setField(this, 12, value);
        }
        get isAuthor() {
            return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
        }
        set isAuthor(value: boolean) {
            pb_1.Message.setField(this, 13, value);
        }
        static fromObject(data: {
            articleID?: number;
            authorID?: number;
            type?: ArticleType;
            title?: string;
            createdAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            updatedAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            body?: string;
            views?: number;
            likes?: number;
            comments?: number;
            isPrivate?: boolean;
            isLiked?: boolean;
            isAuthor?: boolean;
        }): GetArticleResponse {
            const message = new GetArticleResponse({});
            if (data.articleID != null) {
                message.articleID = data.articleID;
            }
            if (data.authorID != null) {
                message.authorID = data.authorID;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.createdAt != null) {
                message.createdAt = dependency_1.google.protobuf.Timestamp.fromObject(data.createdAt);
            }
            if (data.updatedAt != null) {
                message.updatedAt = dependency_1.google.protobuf.Timestamp.fromObject(data.updatedAt);
            }
            if (data.body != null) {
                message.body = data.body;
            }
            if (data.views != null) {
                message.views = data.views;
            }
            if (data.likes != null) {
                message.likes = data.likes;
            }
            if (data.comments != null) {
                message.comments = data.comments;
            }
            if (data.isPrivate != null) {
                message.isPrivate = data.isPrivate;
            }
            if (data.isLiked != null) {
                message.isLiked = data.isLiked;
            }
            if (data.isAuthor != null) {
                message.isAuthor = data.isAuthor;
            }
            return message;
        }
        toObject() {
            const data: {
                articleID?: number;
                authorID?: number;
                type?: ArticleType;
                title?: string;
                createdAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                updatedAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                body?: string;
                views?: number;
                likes?: number;
                comments?: number;
                isPrivate?: boolean;
                isLiked?: boolean;
                isAuthor?: boolean;
            } = {};
            if (this.articleID != null) {
                data.articleID = this.articleID;
            }
            if (this.authorID != null) {
                data.authorID = this.authorID;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.createdAt != null) {
                data.createdAt = this.createdAt.toObject();
            }
            if (this.updatedAt != null) {
                data.updatedAt = this.updatedAt.toObject();
            }
            if (this.body != null) {
                data.body = this.body;
            }
            if (this.views != null) {
                data.views = this.views;
            }
            if (this.likes != null) {
                data.likes = this.likes;
            }
            if (this.comments != null) {
                data.comments = this.comments;
            }
            if (this.isPrivate != null) {
                data.isPrivate = this.isPrivate;
            }
            if (this.isLiked != null) {
                data.isLiked = this.isLiked;
            }
            if (this.isAuthor != null) {
                data.isAuthor = this.isAuthor;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.articleID != 0)
                writer.writeUint32(1, this.articleID);
            if (this.authorID != 0)
                writer.writeUint32(2, this.authorID);
            if (this.type != ArticleType.GENERAL)
                writer.writeEnum(3, this.type);
            if (this.title.length)
                writer.writeString(4, this.title);
            if (this.has_createdAt)
                writer.writeMessage(5, this.createdAt, () => this.createdAt.serialize(writer));
            if (this.has_updatedAt)
                writer.writeMessage(6, this.updatedAt, () => this.updatedAt.serialize(writer));
            if (this.body.length)
                writer.writeString(7, this.body);
            if (this.views != 0)
                writer.writeUint64(8, this.views);
            if (this.likes != 0)
                writer.writeUint32(9, this.likes);
            if (this.comments != 0)
                writer.writeUint32(10, this.comments);
            if (this.isPrivate != false)
                writer.writeBool(11, this.isPrivate);
            if (this.isLiked != false)
                writer.writeBool(12, this.isLiked);
            if (this.isAuthor != false)
                writer.writeBool(13, this.isAuthor);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetArticleResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetArticleResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.articleID = reader.readUint32();
                        break;
                    case 2:
                        message.authorID = reader.readUint32();
                        break;
                    case 3:
                        message.type = reader.readEnum();
                        break;
                    case 4:
                        message.title = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.createdAt, () => message.createdAt = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.updatedAt, () => message.updatedAt = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 7:
                        message.body = reader.readString();
                        break;
                    case 8:
                        message.views = reader.readUint64();
                        break;
                    case 9:
                        message.likes = reader.readUint32();
                        break;
                    case 10:
                        message.comments = reader.readUint32();
                        break;
                    case 11:
                        message.isPrivate = reader.readBool();
                        break;
                    case 12:
                        message.isLiked = reader.readBool();
                        break;
                    case 13:
                        message.isAuthor = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetArticleResponse {
            return GetArticleResponse.deserialize(bytes);
        }
    }
    export class SetArticleVisibilityRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            articleID?: number;
            userID?: number;
            isPrivate?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("articleID" in data && data.articleID != undefined) {
                    this.articleID = data.articleID;
                }
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
                if ("isPrivate" in data && data.isPrivate != undefined) {
                    this.isPrivate = data.isPrivate;
                }
            }
        }
        get articleID() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set articleID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get isPrivate() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set isPrivate(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            articleID?: number;
            userID?: number;
            isPrivate?: boolean;
        }): SetArticleVisibilityRequest {
            const message = new SetArticleVisibilityRequest({});
            if (data.articleID != null) {
                message.articleID = data.articleID;
            }
            if (data.userID != null) {
                message.userID = data.userID;
            }
            if (data.isPrivate != null) {
                message.isPrivate = data.isPrivate;
            }
            return message;
        }
        toObject() {
            const data: {
                articleID?: number;
                userID?: number;
                isPrivate?: boolean;
            } = {};
            if (this.articleID != null) {
                data.articleID = this.articleID;
            }
            if (this.userID != null) {
                data.userID = this.userID;
            }
            if (this.isPrivate != null) {
                data.isPrivate = this.isPrivate;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.articleID != 0)
                writer.writeUint32(1, this.articleID);
            if (this.userID != 0)
                writer.writeUint32(2, this.userID);
            if (this.isPrivate != false)
                writer.writeBool(3, this.isPrivate);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetArticleVisibilityRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetArticleVisibilityRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.articleID = reader.readUint32();
                        break;
                    case 2:
                        message.userID = reader.readUint32();
                        break;
                    case 3:
                        message.isPrivate = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetArticleVisibilityRequest {
            return SetArticleVisibilityRequest.deserialize(bytes);
        }
    }
    export class UpdateArticleBodyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            articleID?: number;
            userID?: number;
            body?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("articleID" in data && data.articleID != undefined) {
                    this.articleID = data.articleID;
                }
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
                if ("body" in data && data.body != undefined) {
                    this.body = data.body;
                }
            }
        }
        get articleID() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set articleID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get body() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set body(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            articleID?: number;
            userID?: number;
            body?: string;
        }): UpdateArticleBodyRequest {
            const message = new UpdateArticleBodyRequest({});
            if (data.articleID != null) {
                message.articleID = data.articleID;
            }
            if (data.userID != null) {
                message.userID = data.userID;
            }
            if (data.body != null) {
                message.body = data.body;
            }
            return message;
        }
        toObject() {
            const data: {
                articleID?: number;
                userID?: number;
                body?: string;
            } = {};
            if (this.articleID != null) {
                data.articleID = this.articleID;
            }
            if (this.userID != null) {
                data.userID = this.userID;
            }
            if (this.body != null) {
                data.body = this.body;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.articleID != 0)
                writer.writeUint32(1, this.articleID);
            if (this.userID != 0)
                writer.writeUint32(2, this.userID);
            if (this.body.length)
                writer.writeString(3, this.body);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateArticleBodyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateArticleBodyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.articleID = reader.readUint32();
                        break;
                    case 2:
                        message.userID = reader.readUint32();
                        break;
                    case 3:
                        message.body = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateArticleBodyRequest {
            return UpdateArticleBodyRequest.deserialize(bytes);
        }
    }
    export class UpdateArticleTitleRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            articleID?: number;
            userID?: number;
            title?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("articleID" in data && data.articleID != undefined) {
                    this.articleID = data.articleID;
                }
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
            }
        }
        get articleID() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set articleID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            articleID?: number;
            userID?: number;
            title?: string;
        }): UpdateArticleTitleRequest {
            const message = new UpdateArticleTitleRequest({});
            if (data.articleID != null) {
                message.articleID = data.articleID;
            }
            if (data.userID != null) {
                message.userID = data.userID;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            return message;
        }
        toObject() {
            const data: {
                articleID?: number;
                userID?: number;
                title?: string;
            } = {};
            if (this.articleID != null) {
                data.articleID = this.articleID;
            }
            if (this.userID != null) {
                data.userID = this.userID;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.articleID != 0)
                writer.writeUint32(1, this.articleID);
            if (this.userID != 0)
                writer.writeUint32(2, this.userID);
            if (this.title.length)
                writer.writeString(3, this.title);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateArticleTitleRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateArticleTitleRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.articleID = reader.readUint32();
                        break;
                    case 2:
                        message.userID = reader.readUint32();
                        break;
                    case 3:
                        message.title = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateArticleTitleRequest {
            return UpdateArticleTitleRequest.deserialize(bytes);
        }
    }
    export class DeleteArticleRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            articleID?: number;
            userID?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("articleID" in data && data.articleID != undefined) {
                    this.articleID = data.articleID;
                }
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
            }
        }
        get articleID() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set articleID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            articleID?: number;
            userID?: number;
        }): DeleteArticleRequest {
            const message = new DeleteArticleRequest({});
            if (data.articleID != null) {
                message.articleID = data.articleID;
            }
            if (data.userID != null) {
                message.userID = data.userID;
            }
            return message;
        }
        toObject() {
            const data: {
                articleID?: number;
                userID?: number;
            } = {};
            if (this.articleID != null) {
                data.articleID = this.articleID;
            }
            if (this.userID != null) {
                data.userID = this.userID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.articleID != 0)
                writer.writeUint32(1, this.articleID);
            if (this.userID != 0)
                writer.writeUint32(2, this.userID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteArticleRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteArticleRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.articleID = reader.readUint32();
                        break;
                    case 2:
                        message.userID = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteArticleRequest {
            return DeleteArticleRequest.deserialize(bytes);
        }
    }
    export class ToggleArticleLikeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            articleID?: number;
            userID?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("articleID" in data && data.articleID != undefined) {
                    this.articleID = data.articleID;
                }
                if ("userID" in data && data.userID != undefined) {
                    this.userID = data.userID;
                }
            }
        }
        get articleID() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set articleID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get userID() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set userID(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            articleID?: number;
            userID?: number;
        }): ToggleArticleLikeRequest {
            const message = new ToggleArticleLikeRequest({});
            if (data.articleID != null) {
                message.articleID = data.articleID;
            }
            if (data.userID != null) {
                message.userID = data.userID;
            }
            return message;
        }
        toObject() {
            const data: {
                articleID?: number;
                userID?: number;
            } = {};
            if (this.articleID != null) {
                data.articleID = this.articleID;
            }
            if (this.userID != null) {
                data.userID = this.userID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.articleID != 0)
                writer.writeUint32(1, this.articleID);
            if (this.userID != 0)
                writer.writeUint32(2, this.userID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ToggleArticleLikeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ToggleArticleLikeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.articleID = reader.readUint32();
                        break;
                    case 2:
                        message.userID = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ToggleArticleLikeRequest {
            return ToggleArticleLikeRequest.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedArticleServiceService {
        static definition = {
            CreateArticle: {
                path: "/articles.ArticleService/CreateArticle",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateArticleRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateArticleRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateArticleResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateArticleResponse.deserialize(new Uint8Array(bytes))
            },
            ListArticle: {
                path: "/articles.ArticleService/ListArticle",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListArticleRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListArticleRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListArticleResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListArticleResponse.deserialize(new Uint8Array(bytes))
            },
            ListArticleByAuthor: {
                path: "/articles.ArticleService/ListArticleByAuthor",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListArticleByAuthorRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListArticleByAuthorRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListArticleResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListArticleResponse.deserialize(new Uint8Array(bytes))
            },
            GetArticle: {
                path: "/articles.ArticleService/GetArticle",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetArticleRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetArticleRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetArticleResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetArticleResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateArticleBody: {
                path: "/articles.ArticleService/UpdateArticleBody",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateArticleBodyRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateArticleBodyRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            UpdateArticleTitle: {
                path: "/articles.ArticleService/UpdateArticleTitle",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateArticleTitleRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateArticleTitleRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            DeleteArticle: {
                path: "/articles.ArticleService/DeleteArticle",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteArticleRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteArticleRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            SetArticleVisibility: {
                path: "/articles.ArticleService/SetArticleVisibility",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SetArticleVisibilityRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SetArticleVisibilityRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            ToggleArticleLike: {
                path: "/articles.ArticleService/ToggleArticleLike",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ToggleArticleLikeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ToggleArticleLikeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateArticle(call: grpc_1.ServerUnaryCall<CreateArticleRequest, CreateArticleResponse>, callback: grpc_1.sendUnaryData<CreateArticleResponse>): void;
        abstract ListArticle(call: grpc_1.ServerUnaryCall<ListArticleRequest, ListArticleResponse>, callback: grpc_1.sendUnaryData<ListArticleResponse>): void;
        abstract ListArticleByAuthor(call: grpc_1.ServerUnaryCall<ListArticleByAuthorRequest, ListArticleResponse>, callback: grpc_1.sendUnaryData<ListArticleResponse>): void;
        abstract GetArticle(call: grpc_1.ServerUnaryCall<GetArticleRequest, GetArticleResponse>, callback: grpc_1.sendUnaryData<GetArticleResponse>): void;
        abstract UpdateArticleBody(call: grpc_1.ServerUnaryCall<UpdateArticleBodyRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract UpdateArticleTitle(call: grpc_1.ServerUnaryCall<UpdateArticleTitleRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract DeleteArticle(call: grpc_1.ServerUnaryCall<DeleteArticleRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract SetArticleVisibility(call: grpc_1.ServerUnaryCall<SetArticleVisibilityRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract ToggleArticleLike(call: grpc_1.ServerUnaryCall<ToggleArticleLikeRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
    }
    export class ArticleServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedArticleServiceService.definition, "ArticleService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateArticle: GrpcUnaryServiceInterface<CreateArticleRequest, CreateArticleResponse> = (message: CreateArticleRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateArticleResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateArticleResponse>, callback?: grpc_1.requestCallback<CreateArticleResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateArticle(message, metadata, options, callback);
        };
        ListArticle: GrpcUnaryServiceInterface<ListArticleRequest, ListArticleResponse> = (message: ListArticleRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListArticleResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListArticleResponse>, callback?: grpc_1.requestCallback<ListArticleResponse>): grpc_1.ClientUnaryCall => {
            return super.ListArticle(message, metadata, options, callback);
        };
        ListArticleByAuthor: GrpcUnaryServiceInterface<ListArticleByAuthorRequest, ListArticleResponse> = (message: ListArticleByAuthorRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListArticleResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListArticleResponse>, callback?: grpc_1.requestCallback<ListArticleResponse>): grpc_1.ClientUnaryCall => {
            return super.ListArticleByAuthor(message, metadata, options, callback);
        };
        GetArticle: GrpcUnaryServiceInterface<GetArticleRequest, GetArticleResponse> = (message: GetArticleRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetArticleResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetArticleResponse>, callback?: grpc_1.requestCallback<GetArticleResponse>): grpc_1.ClientUnaryCall => {
            return super.GetArticle(message, metadata, options, callback);
        };
        UpdateArticleBody: GrpcUnaryServiceInterface<UpdateArticleBodyRequest, dependency_2.google.protobuf.Empty> = (message: UpdateArticleBodyRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.UpdateArticleBody(message, metadata, options, callback);
        };
        UpdateArticleTitle: GrpcUnaryServiceInterface<UpdateArticleTitleRequest, dependency_2.google.protobuf.Empty> = (message: UpdateArticleTitleRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.UpdateArticleTitle(message, metadata, options, callback);
        };
        DeleteArticle: GrpcUnaryServiceInterface<DeleteArticleRequest, dependency_2.google.protobuf.Empty> = (message: DeleteArticleRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.DeleteArticle(message, metadata, options, callback);
        };
        SetArticleVisibility: GrpcUnaryServiceInterface<SetArticleVisibilityRequest, dependency_2.google.protobuf.Empty> = (message: SetArticleVisibilityRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.SetArticleVisibility(message, metadata, options, callback);
        };
        ToggleArticleLike: GrpcUnaryServiceInterface<ToggleArticleLikeRequest, dependency_2.google.protobuf.Empty> = (message: ToggleArticleLikeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.ToggleArticleLike(message, metadata, options, callback);
        };
    }
}
